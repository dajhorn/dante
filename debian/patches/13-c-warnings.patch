Fix a whole slew of warnings from the C compiler with and without
the Debian hardening wrapper.

--- a/include/common.h
+++ b/include/common.h
@@ -1692,7 +1692,7 @@
  */
 
 char *
-udpheader_add __P((const struct sockshost_t *host, char *msg, size_t *len,
+udpheader_add __P((const struct sockshost_t *host, const char *msg, size_t *len,
 						 size_t msgsize));
 /*
  * Prefixes the udpheader_t version of "host" to a copy of "msg",
--- a/lib/udp_util.c
+++ b/lib/udp_util.c
@@ -64,7 +64,7 @@
 char *
 udpheader_add(host, msg, len, msgsize)
 	const struct sockshost_t *host;
-	char *msg;
+	const char *msg;
 	size_t *len;
 	size_t msgsize;
 {
--- a/lib/config.c
+++ b/lib/config.c
@@ -621,7 +621,7 @@
 			break;
 	}
 
-	slog(LOG_DEBUG, function);
+	slog(LOG_DEBUG, "%s", function);
 	return NULL;
 }
 #endif /* SOCKS_CLIENT */
@@ -649,24 +649,24 @@
 	if (state->command.udpreply)
 		bufused += snprintfn(&buf[bufused], sizeof(buf) - bufused, "%s, ",
 		SOCKS_UDPREPLYs);
-	slog(LOG_INFO, buf);
+	slog(LOG_INFO, "%s", buf);
 
 	bufused = snprintfn(buf, sizeof(buf), "extension(s): ");
 	if (state->extension.bind)
 		bufused += snprintfn(&buf[bufused], sizeof(buf) - bufused, "bind");
-	slog(LOG_INFO, buf);
+	slog(LOG_INFO, "%s", buf);
 
 	bufused = snprintfn(buf, sizeof(buf), "protocol(s): ");
 	protocols2string(&state->protocol,
 	&buf[bufused], sizeof(buf) - bufused);
-	slog(LOG_INFO, buf);
+	slog(LOG_INFO, "%s", buf);
 
 	showmethod(state->methodc, state->methodv);
 
 	bufused = snprintfn(buf, sizeof(buf), "proxyprotocol(s): ");
 	proxyprotocols2string(&state->proxyprotocol,
 	&buf[bufused], sizeof(buf) - bufused);
-	slog(LOG_INFO, buf);
+	slog(LOG_INFO, "%s", buf);
 
 }
 
--- a/lib/connectchild.c
+++ b/lib/connectchild.c
@@ -419,7 +419,7 @@
 	fd_set rset;
 	struct sigaction sig;
 
-	slog(LOG_DEBUG, function);
+	slog(LOG_DEBUG, "%s", function);
 #if 0
 	sleep(20);
 #endif
--- a/lib/httpproxy.c
+++ b/lib/httpproxy.c
@@ -59,7 +59,7 @@
 	struct sockaddr addr;
 	socklen_t addrlen;
 
-	slog(LOG_DEBUG, function);
+	slog(LOG_DEBUG, "%s", function);
 
 	sockshost2string(&packet->req.host, host, sizeof(host));
 
--- a/lib/msproxy_clientprotocol.c
+++ b/lib/msproxy_clientprotocol.c
@@ -299,7 +299,7 @@
 	struct sockaddr_in addr;
 	socklen_t len;
 
-	slog(LOG_DEBUG, function);
+	slog(LOG_DEBUG, "%s", function);
 
 #if 0
 
@@ -523,7 +523,7 @@
 	struct sockaddr_in addr;
 	socklen_t len;
 
-	slog(LOG_DEBUG, function);
+	slog(LOG_DEBUG, "%s", function);
 
 	bzero(&req, sizeof(req));
 	req.clientid		= packet->state.msproxy.clientid;
@@ -687,7 +687,7 @@
 	struct timeval timeout;
 	int dbits;
 
-	slog(LOG_DEBUG, function);
+	slog(LOG_DEBUG, "%s", function);
 
 	/*
 	 * Find the socket we were signalled for.
@@ -1869,7 +1869,7 @@
 	int i, max;
 	struct socksfd_t *socksfd;
 
-	slog(LOG_DEBUG, function);
+	slog(LOG_DEBUG, "%s", function);
 
 	for (i = 0, max = getdtablesize(); i < max; ++i) {
 		if ((socksfd = socks_getaddr((unsigned int)i)) == NULL)
@@ -1890,7 +1890,7 @@
 	const char *function = "msproxy_sessionend()";
 	struct msproxy_request_t req;
 
-	slog(LOG_DEBUG, function);
+	slog(LOG_DEBUG, "%s", function);
 
 	bzero(&req, sizeof(req));
 	*req.username		= NUL;
@@ -1915,7 +1915,7 @@
 	struct socksfd_t *socksfd;
 	int i, max;
 
-	slog(LOG_DEBUG, function);
+	slog(LOG_DEBUG, "%s", function);
 
 	for (i = 0, max = getdtablesize(); i < max; ++i) {
 		if ((socksfd = socks_getaddr((unsigned int)i)) == NULL)
--- a/sockd/auth_pam.c
+++ b/sockd/auth_pam.c
@@ -91,7 +91,7 @@
 	_pam_priv_data = NULL;
 #endif /* HAVE_SOLARIS_PAM_BUG */
 
-	slog(LOG_DEBUG, function);
+	slog(LOG_DEBUG, "%s", function);
 
 	socks_seteuid(&euid, sockscf.uid.privileged);
 
--- a/sockd/serverconfig.c
+++ b/sockd/serverconfig.c
@@ -473,13 +473,13 @@
 	for (i = 0; (size_t)i < sockscf->methodc; ++i)
 		bufused += snprintfn(&buf[bufused], sizeof(buf) - bufused, "%s%s",
 		i > 0 ? ", " : "", method2string(sockscf->methodv[i]));
-	slog(LOG_DEBUG, buf);
+	slog(LOG_DEBUG, "%s", buf);
 
 	bufused = snprintfn(buf, sizeof(buf), "clientmethod(s): ");
 	for (i = 0; (size_t)i < sockscf->clientmethodc; ++i)
 		bufused += snprintfn(&buf[bufused], sizeof(buf) - bufused, "%s%s",
 		i > 0 ? ", " : "", method2string(sockscf->clientmethodv[i]));
-	slog(LOG_DEBUG, buf);
+	slog(LOG_DEBUG, "%s", buf);
 
 	if (sockscf->option.debug) {
 		struct rule_t *rule;
--- a/sockd/sockd.c
+++ b/sockd/sockd.c
@@ -974,7 +974,7 @@
 	uid_t euid;
 	int p;
 
-	slog(LOG_INFO, function);
+	slog(LOG_INFO, "%s", function);
 
 	resetconfig();
 	optioninit();
--- a/sockd/sockd_child.c
+++ b/sockd/sockd_child.c
@@ -112,7 +112,7 @@
 	 */
 	if (freedescriptors(NULL) < reserved) {
 		errno = EMFILE;
-		swarn(function);
+		swarn("%s", function);
 		return NULL;
 	}
 
--- a/lib/config_parse.c
+++ b/lib/config_parse.c
@@ -932,8 +932,8 @@
 	va_end(ap);
 
 	if (errno)
-		serr(EXIT_FAILURE, buf);
-	serrx(EXIT_FAILURE, buf);
+		serr(EXIT_FAILURE, "%s", buf);
+	serrx(EXIT_FAILURE, "%s", buf);
 }
 
 void
@@ -967,8 +967,8 @@
 	va_end(ap);
 
 	if (errno)
-		swarn(buf);
-	swarnx(buf);
+		swarn("%s", buf);
+	swarnx("%s", buf);
 }
 
 static void
--- a/lib/config_scan.c
+++ b/lib/config_scan.c
@@ -1583,7 +1583,7 @@
 /* This used to be an fputs(), but since the string might contain NUL's,
  * we now use fwrite().
  */
-#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
+#define ECHO if (fwrite( yytext, yyleng, 1, yyout ) != 1) yy_fatal_error("flex: config_scan.c: fwrite() failed")
 #endif
 
 /* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
--- a/sockd/sockd_util.c
+++ b/sockd/sockd_util.c
@@ -175,7 +175,7 @@
 	int mainmother;
 	static int init;
 
-	slog(LOG_DEBUG, function);
+	slog(LOG_DEBUG, "%s", function);
 
 	/*
 	 * we are terminating, don't want to receive SIGTERM while terminating,
