Rename the libdsocks library to libdsocskd to avoid a conflict with
the libsocks4 package (#52475).

--- a/bin/socksify.in
+++ b/bin/socksify.in
@@ -52,7 +52,7 @@
 LIBDIR="@LIBRARY_PREFIX@"
 
 #XXX shared library name should be generated too (possibly including version)
-LIBRARY="${SOCKS_LIBRARY-${LIBDIR}/libdsocks.@SOLIB_POSTFIX@}"
+LIBRARY="${SOCKS_LIBRARY-${LIBDIR}/libdsocksd.@SOLIB_POSTFIX@}.0"
 
 PRELOAD_SEPERATOR="@PRELOAD_SEPERATOR@"
 PRELOAD_POSTFIX="@PRELOAD_POSTFIX@"
--- a/doc/faq.tex
+++ b/doc/faq.tex
@@ -475,7 +475,7 @@
    edit the file /etc/ld.so.preload
    and add two lines saying:
       libdl.so
-      libdsocks.so
+      libdsocksd.so
   \end{verbatim}
  \emph{Thanks to: Dag Wieers <dag@wieers.com>.}
 
@@ -489,7 +489,7 @@
   you could add
 
   \begin{verbatim}
-   LD_PRELOAD="libdl.so libdsocks.so"
+   LD_PRELOAD="libdl.so libdsocksd.so.0"
    export LD_PRELOAD
   \end{verbatim}
   to the environment. (/etc/profile ~/.profile ~/.bashrc)
@@ -528,7 +528,7 @@
   the result becomes the the same as not using socksify on them.
 
   Solution: strip off the suid bit if possible or recompile the binary
-  (rsh, ssh, etc) with explicit socks support (adding "-ldsocks"
+  (rsh, ssh, etc) with explicit socks support (adding "-ldsocksd"
   to the linkoptions is usually enough.)
 
  \subsection{Why doesn't socksify work on HP-UX 11.00?}
--- a/doc/README.socksify
+++ b/doc/README.socksify
@@ -2,7 +2,7 @@
 
 The shell script socksify in the bin directory is meant to aid in
 using socks with already compiled dynamic binaries.  This works by
-setting the LD_PRELOAD environment variable to libdsocks.  It will
+setting the LD_PRELOAD environment variable to libdsocksd.  It will
 then wrap all networking-related system calls.
 
 When used the script can socksify a program by simply giving it as a
--- a/doc/README.usage
+++ b/doc/README.usage
@@ -7,15 +7,15 @@
 	The simplest way to add socks support to an already
 (dynamically) complied application is to use the LD_PRELOAD facility
 to replace the standard library functions with socksified ones.  The
-libdsocks library is provided for this purpose.  See the
+libdsocksd library is provided for this purpose.  See the
 README.socksify file for more information.  This will probably only
 work with non-setuid applications since LD_PRELOAD is usually ignored
 otherwise.  If setting LD_PRELOAD is not possible, compilation is
 another possibility.
 
 	If the application can be compiled dynamically socks support
-can be added explicitly by linking with libdsocks (usually done by adding
-'-ldsocks').  This will automagically give the application socks
+can be added explicitly by linking with libdsocksd (usually done by adding
+'-ldsocksd').  This will automagically give the application socks
 support without making any code changes.
 
 Static Compilation
@@ -24,8 +24,8 @@
 changed to use socks, even if it is not linked dynamically.
 Several systemcalls and librarycalls must be changed to use the
 socksified versions instead of the standard ones.  The application
-is then linked with the libsocks library in the distribution (-lsocks,
-not -ldsocks).
+is then linked with the libsocks library in the distribution (-lsocksd,
+not -ldsocksd).
 
 These function calls can be found in the socks library:
 Raccept
@@ -71,6 +71,6 @@
 Libraries
 	In total there are three libraries distributed with this package:
 
- libsocks.so  - standard shared library, contains Rfoo type functions.
- libsocks.a   - static version of the above.
- libdsocks.so - shared library which does "on the fly" socksification.
+ libsocksd.so  - standard shared library, contains Rfoo type functions.
+ libsocksd.a   - static version of the above.
+ libdsocksd.so - shared library which does "on the fly" socksification.
--- a/lib/Makefile.in
+++ b/lib/Makefile.in
@@ -213,7 +213,7 @@
 subdirs = @subdirs@
 sysconfdir = @sysconfdir@
 target_alias = @target_alias@
-lib_LTLIBRARIES = libsocks.la
+lib_LTLIBRARIES = libsocksd.la
 libsocks_la_SOURCES = config_parse.y config_scan.l Raccept.c Rbind.c \
 	Rgetpeername.c Rgetsockname.c Rrresvport.c io.c    \
 	address.c authneg.c client.c clientconfig.c clientprotocol.c \
@@ -302,7 +302,7 @@
 	  rm -f config_parse.c; \
 	  $(MAKE) config_parse.c; \
 	else :; fi
-libsocks.la: $(libsocks_la_OBJECTS) $(libsocks_la_DEPENDENCIES) 
+libsocksd.la: $(libsocks_la_OBJECTS) $(libsocks_la_DEPENDENCIES) 
 	$(LINK) -rpath $(libdir) $(libsocks_la_LDFLAGS) $(libsocks_la_OBJECTS) $(libsocks_la_LIBADD) $(LIBS)
 
 mostlyclean-compile:
--- a/dlib/int_osf3.c
+++ b/dlib/int_osf3.c
@@ -81,7 +81,7 @@
 #undef sendto
 
 /* XXX Attempt to support old library calls, which use old version of
-   sockaddr and msghdr struct. Other parts of libdsocks are compiled
+   sockaddr and msghdr struct. Other parts of libdsocksd are compiled
    using the new versions. */
 
 /* sockaddr struct, with sa_len */
--- a/dlib/Makefile.in
+++ b/dlib/Makefile.in
@@ -214,7 +214,7 @@
 subdirs = @subdirs@
 sysconfdir = @sysconfdir@
 target_alias = @target_alias@
-lib_LTLIBRARIES = libdsocks.la
+lib_LTLIBRARIES = libdsocksd.la
 libdsocks_la_SOURCES = interposition.c int_osf1.c int_osf2.c int_osf3.c \
 	../lib/config_parse.y ../lib/io.c ../lib/debug.c ../lib/udp.c \
 	../lib/Rgetpeername.c ../lib/Rgetsockname.c \
@@ -304,7 +304,7 @@
 	  rm -f config_parse.c; \
 	  $(MAKE) config_parse.c; \
 	else :; fi
-libdsocks.la: $(libdsocks_la_OBJECTS) $(libdsocks_la_DEPENDENCIES) 
+libdsocksd.la: $(libdsocks_la_OBJECTS) $(libdsocks_la_DEPENDENCIES) 
 	$(LINK) -rpath $(libdir) $(libdsocks_la_LDFLAGS) $(libdsocks_la_OBJECTS) $(libdsocks_la_LIBADD) $(LIBS)
 
 mostlyclean-compile:
--- a/include/socks.h
+++ b/include/socks.h
@@ -237,7 +237,7 @@
 __BEGIN_DECLS
 
 /*
- * libsocks function declarations
+ * libsocksd function declarations
  */
 
 void
